/**
 * Box Class - V0.1.0
 */

const path = require("path");
const fs = require('fs');
const logger = require('./Noty.js');

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

var noty = new logger.Noty("all");

function Box() {
    this.appPath = path.dirname(require.main.filename);
    this.moduleAbsPath = __dirname;
    this.myPack = path.resolve(this.moduleAbsPath, 'package.json');
    this.appPack = path.resolve(this.appPath, 'package.json');
    console.log(this.appPack);

    // Read our package.json
    var wb_pack = JSON.parse(fs.readFileSync(this.myPack, 'utf8'));

    // Read app package.json
    var app_pack = JSON.parse(fs.readFileSync(this.appPack, 'utf8'));

    // Setup devDependencies in the app package.json
    for (var module in wb_pack['devDependencies']) {
        app_pack['devDependencies'][module] = wb_pack['devDependencies'][module];
        noty.log('[WB] devDependencies added = ' + module + ": " + wb_pack['devDependencies'][module]);
    }

    // Setup dependencies in the app package.json
    for (var module in wb_pack['dependencies']) {
        app_pack['dependencies'][module] = wb_pack['dependencies'][module];
        noty.log('[WB] dependencies added = ' + module + ": " + wb_pack['dependencies'][module]);
    }

    // Save changes
    fs.writeFile(this.appPack, JSON.stringify(app_pack, null, 2), (err) => {
        if (err) throw err;
        noty.log('[WB] A new package.json for Your app was created!', 'done');
        this.setupWebpack();
    });
}

Box.prototype.setupWebpack = function() {

    // Prepare default webpack settings
    var default_settings = {
        "entry": null,
        "contentBase": null,
        "outName": "app.js"
    };

    noty.log('[WB] Please, enter settings for webpack.', 'info');

    rl.question(' Entry point: ', (answer) => { // get entry point
        default_settings.entry = answer;

        rl.question(' Content base: ', (answer) => { // get content base
            default_settings.contentBase = answer;

            rl.question(' Output name (app.js): ', (answer) => { // get output filename
                if (answer != "" && answer != null)
                default_settings.outName = answer;
                rl.close();

                // Check data
                noty.log('[WB] Settings config was created.', 'done');
                noty.log(default_settings);
            });
        });
    });
}

exports.Box = Box;